model Organization {
    id          String       @id @default(uuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    name        String
    slug        String?
    logo        String?
    metadata    String?
    members     Member[]
    invitations Invitation[]
    teams       Team[]

    @@unique([slug])
    @@map("organization")
}

model Member {
    id             String       @id @default(uuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String
    teamId         String?

    @@map("member")
}

model Invitation {
    id             String       @id @default(uuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    email          String
    role           String?
    teamId         String?
    status         String
    expiresAt      DateTime
    inviterId      String
    user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

    @@map("invitation")
}

model Team {
    id             String       @id @default(uuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    name           String
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@map("team")
}
