model User {
    id            String       @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    role          String?
    banned        Boolean?
    banReason     String?
    banExpires    DateTime?
    sessions      Session[]
    accounts      Account[]
    members       Member[]
    invitations   Invitation[]

    @@unique([email])
    @@map("user")
}

model Session {
    id                   String   @id
    expiresAt            DateTime
    token                String
    createdAt            DateTime
    updatedAt            DateTime
    ipAddress            String?
    userAgent            String?
    userId               String
    user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    impersonatedBy       String?
    activeOrganizationId String?

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id @default(uuid())
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?

    @@map("account")
}

model Verification {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    identifier String
    value      String
    expiresAt  DateTime

    @@map("verification")
}
